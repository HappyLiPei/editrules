%\VignetteIndexEntry{Error localization for numerical and categorical edits as a mixed integer problem}
\documentclass[11pt, fleqn, a4paper]{article}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb, amsthm}
\usepackage{threeparttable}
\usepackage{natbib}
\usepackage[noend]{algpseudocode}
\usepackage{algorithm}
\renewcommand{\algorithmicrequire}{\textbf{Input:}}
\renewcommand{\algorithmicensure}{\textbf{Output:}}
\usepackage{threeparttable}
\DeclareMathOperator*{\argmin}{\arg\!\min}
\DeclareMathOperator*{\Lor}{\lor}
\DeclareMathOperator*{\Land}{\land}
\DeclareMathOperator{\res}{\mathfrak{R}}
\newcommand{\rhomap}{\xrightarrow{\rho}}

\newtheorem{theorem}{Theorem}

\usepackage{float} 
 
\floatstyle{boxed}
\newfloat{Rcode}{t}{rco}
\floatname{Rcode}{Figure}



% stimulate latex to put multiple floats on a page.
\setcounter{topnumber}{2}
\setcounter{bottomnumber}{2}
\setcounter{totalnumber}{3}
\setcounter{dbltopnumber}{2}
\renewcommand{\topfraction}{.9}
\renewcommand{\textfraction}{.1}
\renewcommand{\bottomfraction}{.75}
\renewcommand{\floatpagefraction}{.9}
\renewcommand{\dblfloatpagefraction}{.9}
\renewcommand{\dbltopfraction}{.9}
\hyphenation{time-stamp}

<<echo=false>>=
library(editrules)
@

\title{Error localization as a mixed integer problem with the {\tt editrules} package\\
{\small package version \Sexpr{packageVersion("editrules")}}}
\author{Edwin de Jonge and Mark van der Loo}
\begin{document}
\maketitle
\begin{abstract}
{\em This vignette is far from finished. Version 2.0 of the package will have
the full vignette. At the moment, functionality for solving error localization problems
with lp solvers is experimental.}
\end{abstract}

\newpage
\tableofcontents
\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% SECTION 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Introduction}
Analyses of real data are often hindered by occurrences of incomplete or
inconsistent raw data records.  The process of locating and correcting such
errors is referred to as {\em data editing}, and it has been estimated that
National Statistics Institutes spend up to 40\% of their resources on this
process \citep{waal:2011}. For this reason, considerable attention is paid to
the development of data editing methods that can be automated. Since data are
often required to obey many interrelated consistency rules, data
editing can be too complex to perform manually. \citet{winkler:1999} mentions
practical cases where records have to obey 250, 300 or even 750 internal
consistency rules.  Although the {\sf R} statistical environment has numerous
facilities for analyzing categorical data [See {\em e.g.} \citet{husson:2010}],
the options for error localization and record correction are currently limited.

The {\sf R} package {\sf editrules} was
developed to help closing the gap between raw data retrieval and data analysis
with {\sf R}.  The main purpose of the {\sf editrules} package is to provide a
user-friendly environment for handling data restriction rules, to apply those
rules to data, and to localize erroneous fields in data based on the
generalized principle of \cite{fellegi:1976}.  The package does not offer
functionality for data correction. However, it does facilitate the
identification of the set of solutions for an error correction problem. 
For a detailed description we refer to \cite{jonge:2011} and \cite{loo:2011b}.

{\sf editrules} offers a fairly complete toolbox to work with numerical and categorical edits.
It contains a flexible object for localizing errors, which can be adapted by the user of {\sf editrules} based on a branch and bound
algorithm (ref Waal).
However, for the time to solve the error localization problem with a branch and bound algorithm grows exponentially with the number of (incorrect) variables. Many surveys have hundreds of variables, which results in (very) long processing times for records with many errors. 

This paper describes the error localization problem for numerical and categorical edits as a mixed integer problem and its implementation in {\sf editrules}. Mixed integer programming is a special case of linear programming. Linear programming maximizes a linear objective function, which is subject to linear equality and linear inequality constraints. 
More formally: 
\begin{eqnarray}
\label{eq:mip}
   \max {\bf w}^T {\bf x} \\
   A {\bf x} \leq {\bf b} \\
   \textrm{with } {\bf x} \geq 0
\end{eqnarray}
where ${\bf x}$ is the vector of (numerical) variables to be optimized, ${\bf w}$ is a vector of weights, ${\bf b}$ is a vector of upper bounds and $A$ is a coefficient matrix for the constraints. In mixed integer programming (mip) ${\bf x}$ is a mixture of continious and integer variables.

The implementation results in a fast error localization procedure, which is typically much faster than the branch and bound method in {\sf editrules}.

In section ref we describe the mip formuliation for numerical records. Section ref describes the mip formulation for categorical records. We end with a discussion on the implementation in {\sf editrules}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% SECTION 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Numerical data errors}
Numerical record $\bf x$  with reported values ${\rm(c_1,\dots,c_m)}$ has to comply to 
\begin{equation}
\label{eq:edit}
A {\bf x \odot b} \textrm{ with }\odot\in\{<,\leq,=\}^n,
\end{equation}

In practice variables are always bounded: No person is older than 200 years old or taller than 30 feet. Each variable $x_i$  has a lower boundary $\rm l_i$ and an upper boundary $\rm u_i$. \begin{equation}
{\rm l}_i \leq x_i \leq {\rm u}_i \label{eq:boundary}
\end{equation}
Please note that equation \ref{eq:boundary} can also be written in the form of \ref{eq:edit}. For our formulation as a mip we will use the boundaries explicitly and remove them from \ref{eq:edit}.


For each variable $x_i$ the following value is reported:
\begin{equation}
x_i = {\rm c}_i \label{eq:values}
\end{equation}

For each variable $x_i$ we introduce a binary variable $d_i \in \{0,1\}$ and add 
the following two edits to the edit matrix $A$: 
\begin{eqnarray} \label{eq:binconstraint}
x_i &\leq& {\rm c}_i + ({\rm u}_i - {\rm c}_i)d_i \\
({\rm l}_i - {\rm c}_i)d_i + {\rm c}_i &\leq& x_i
\end{eqnarray}
Variable $d_i$ signifies if the reported value $\rm c_i$ for variable $x_i$ is wrong: If $d_i = 1$ the edits reduce to equation \ref{eq:boundary}, meaning that the value of $x_i$ can take any feasible value within its boundaries $\rm l_i$ and $\rm u_i$.
If $d_i = 0$ these edits reduce to equation \ref{eq:values}, meaning
that the reported ${\rm c}_i$ is assumed correct. 

The principle of Felligi Holt \cite{felligi:1976} is to minimize the weigthed sum of adaptations:
$$\textrm{Minimize} \sum^m_{j=1} \rm{w_j} d_j$$

Minimize $\sum^m_{j=1} w_j d_j$, with:
\begin{equation}
\begin{array}{rcrcl}
\sum^m_{j=1} a_{1j} x_j &&                  &\odot_1& b_1    \\
\ldots                 &&                  &\ldots& \ldots  \\
\sum^m_{j=1}a_{nj} x_j &&                  &\odot_n& b_n    \\
    x_1 &-& {\rm u^*_1} d_1   &\leq   & {\rm c}_1 \\
   -x_1 &+& {\rm l^*_1} d_1  &\leq   & -{\rm c}_1 \\
\ldots  & & \ldots          &       & \ldots \\
    x_m &-& {\rm u^*_m} d_m   &\leq   & {\rm c}_m \\
   -x_m &+& {\rm l^*_m} d_m  &\leq   & -{\rm c}_m

\end{array}
\end{equation}

with ${\rm u^*_i} = {\rm u_i} - {\rm c_i}$ and ${\rm l^*_i} = {\rm l_i} - {\rm c_i}$.

\section{Categorical data errors}
In (ref naar categorical edit paper) we choose an boolean representation for categorical edits.
To solve the error localization problem for (purely) categorical edits we have to formulate categorical
edits as a integer problem.

\subsection{formulation}
Each edit should hold (conjunction) and each edit states that at least one statement has to be true.
An categorical editmatrix can be seen as a conjunction of disjunctions: it is in conjunctive normal form (reference). 

* Write a categorical variable as a disjunction of boolean variables for each category, with the restriction that their sum is atmost 1. (equals 1 for a closed domain).

* each edit can be written as a disjunction of statements

* each disjunction can be written as a numerical edit where at least one of the variables has to be one

\begin{equation}
A \in {a_j} \lor B \in {b_k}
\end{equation}

$$\lnot (A \in {a_j})$$

* error localizing edits: for each variable ${\rm c}_i$ $c^{{\rm c}_i}$, introduce an edit
with $d_i = 1 - c^{{\rm c}_i}$. When $d_i = 0$,  ${\rm c}_i = {\rm c}_{i}$, meaning that the
reported value of ${\rm c}_i$ is assumed correct,  When $d_i = 1$, $c^{\rm c}_i = 0$,
meaning that ${\rm c}_i$ should be adapted.

\subsection{Open vs close domains}

\section{Boundary heuristics}
\subsection{From data set}
Minimum and maximum value of each variable in the data set to be checked gives reasonable boundaries for the dataset. 
\subsection{From observation, per record}
Assume that maximum values for each observation differ at most a factor $f$ (e.g. 1000) of the reported value.

\section{Discussion}

Is a usefull addition to {\tt editrules}, finds quickly solutions to error localization  problems with 
hundreds to thousands of variables. 

Solutions given by current lp solvers can be numerical unstable, which may result in a false positive 
or a false negative solution. Luckily {\tt editrules} contains {\tt substValue} and {\tt isFeasible} 
that can be used together to check the validity of a solution. Furthermore several heuristics can be 
used to increase the numerical stability by using smaller boundaries for the variables.

\subsection{Comparison to {\tt backtracker}}
errorLocalizer is more complete, offers a more complete tool box for finding an optimal solution.
It can also find more equivalent solutions, which is not possible or difficult with MIP solvers.

However when speed of finding a solution matters, it is
\subsection{Previous work}

\bibliographystyle{chicago}
\bibliography{editrules}

\end{document}
