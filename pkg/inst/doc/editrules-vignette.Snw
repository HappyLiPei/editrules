%\VignetteIndexEntry{Editrules, define and check linear data restrictions}
\documentclass[10pt, fleqn, a4paper]{article}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb}
\usepackage{threeparttable}
\usepackage{natbib}
\usepackage{algpseudocode}
\usepackage{algorithm}
\renewcommand{\algorithmicrequire}{\textbf{Input:}}
\renewcommand{\algorithmicensure}{\textbf{Output:}}
\usepackage{threeparttable}


\usepackage{float}
 
\floatstyle{boxed}
\newfloat{Rcode}{t}{rco}
\floatname{Rcode}{Figure}
 


% stimulate latex to put multiple floats on a page.
\setcounter{topnumber}{2}
\setcounter{bottomnumber}{2}
\setcounter{totalnumber}{3}
\setcounter{dbltopnumber}{2}
\renewcommand{\topfraction}{.9}
\renewcommand{\textfraction}{.1}
\renewcommand{\bottomfraction}{.75}
\renewcommand{\floatpagefraction}{.9}
\renewcommand{\dblfloatpagefraction}{.9}
\renewcommand{\dbltopfraction}{.9}
\hyphenation{time-stamp}


\title{Linear edit manipulation and error localization with the {\tt editrules} package}
\author{Edwin de Jonge and Mark van der Loo}
\begin{document}
\maketitle
\begin{abstract}
{\em This vignette is far from finished. Version 1.0 fo the package will have
the full vignette.}
{\tt editrules} is a package to define, parse, manipulate and check linear and other
data restrictions in R. Verbose restrictions can be entered at the
commandline or stored as a (text) file or a database.
This vignette is under construction.
\end{abstract}

<<echo=FALSE, keep.source=FALSE>>=
library(editrules)
@
\maketitle

\tableofcontents

\newpage

\section{Introduction}
The value domain of real numerical data records with $n$ variables is often restricted
to a subdomain of $\mathbb{R}^n$ due to linear equality and inequality relations
which the variables in the record have to obey. Examples include equality restrictions imposed
by financial balance accounts, positivity demands on certain variables or limits on the
ratio of variables.

Any such restriction is of the form
\begin{equation}
\label{edit}
{\bf a}\cdot{\bf x} \odot b\textrm{ with }\odot\in\{<,\leq,=\},
\end{equation}
where $\bf x$ is a numerical data record, ${\bf a}$, ${\bf x}\in \mathbb{R}^n$
and $b\in \mathbb{R}$. In data editing literature, data restriction rules
refered to as {\em edits}, or {\em edit rules}. We will call edits, written
in the form \eqref{edit}, edits in {\em normal form}. 

Large complex surveys are often endowed with dozens or even hundreds of edit
rules.  For example, the Dutch Structural Business Survey, which aims to report
on the financial structure of companies in the Netherlands, contains on the
order of 100 variables, endowed with a similar number of linear equality and
inequality restrictions.

Defining and manipulating large edit sets can be a daunting task without
convenient tools. Also, in practice on will frequently encounter records not
obeying all edit rules, which gives rise to the error localization problem:
which variables contain the errors that cause a record to violate certain
edits?

The {\tt editrules} package for the R statistical computing environment
\citep{R-core:2011} aims to provide an environment to conveniently define,
parse and check linear (in)equality restrictions, perform common edit
manipulations and offer error localization functionality based on the
(generalized) paradigm of \cite{fellegi:1976}. This paradigm is based on the
assumption that errors are distributed randomly over the variables, and there
is no detectable cause of error. The paradigm also decouples the detection from
correction of corrupt variables. Certain causes of error, such as sign flips,
typing errors or rounding errors can be detected and are closely related to
their resolution. The reader is referred to the {\tt deducorrect} package
\citep{loo:2011, scholtus:2008, scholtus:2009} for treating such errors. 


The following chapters demonstrates the functionality of the {\tt editrules}
package with coded examples as well a description of of the underlying theory and
algorithms. For a detailed per-function description the reader is referred to
the reference manual accompanying the package. Unless mentioned otherwise,
all code shown in this paper can be executed from the R commandline after loading
the {\tt editrules} package.


\section{Defining and testing numerical restrictions}

\subsection{The {\tt editmatrix} object}
For computational processing, a set of edits of the form 
\begin{equation}
{\bf a}\cdot{\bf x} \odot b\textrm{ with }\odot\in\{<,\leq,=,\geq,>\}.
\label{nonnormaledit}
\end{equation}
is most conveniently represented as a matrix.  In the {\tt editrules} package,
a set of linear edits is stored as an {\tt editmatrix} object.  This 
object stores the linear relations as an augmented matrix $[{\bf
A},{\bf b}]$, where $\bf A$ is the matrix obtained by combining the  ${\bf a}$
vecors of Eq.\ \eqref{nonnormaledit} in rows of $\bf A$ and constants  $b$ in $\bf b$. A
second attribute stores the comparison operators as a character vector.
Formally, we denote that every {\tt editmatrix} $E$ is defined by
\begin{equation}
E = \left\langle [\mathbf{A},\mathbf{b}],\boldsymbol{\odot}\right\rangle 
\textrm{ with } [{\bf A},{\bf b}]\in \mathbb{R}^{m\times{n+1}},\:
\boldsymbol{\odot}\in\{<,\leq,=,\geq,>\}^{m},
\end{equation}
where $n$ is the number of variables, $m$ the number of edit rules and the notation
$\langle \:,\:\rangle$ denotes a combination of objects.

Retrieval functions for various parts of an {\tt editmatrix} are available, 
see Table \ref{simplemanipulations} for an overview.
Most functions of the {\tt editrules} package expect {\tt E} to be
in normal form. This is achieved by the optional argument {\tt
normalize=TRUE} in the previous statement.  Alternatively, an {\tt editmatrix}
can be normalized by with the {\tt normalize} function.  The function {\tt
isNormalized} can be used to test whether an {\tt editmatrix} is normalized.

Defining augmented matrices by hand is tedious and prone to error, which is why
the {\tt editmatrix} function derives edit matrices from a textual representation
of edit rules. As an example, consider the set of variables
\begin{center}
\begin{tabular}{ll}
turnover       & $t$ \\
personell cost & $c_p$\\
housing cost   & $c_h$\\
total cost     & $c_t$\\
profit         & $p$, \\
\end{tabular}
\end{center}
subject to the rules
\begin{eqnarray}
t   &=& c_t + p\\
c_t &=& c_h + c_p\\ 
p &\leq& 0.6t\\
c_t &\leq& 0.3t\\
c_p&\leq& 0.3t\\
t   &>& 0\\
c_h &>& 0\\
c_p &>& 0\\
c_t &>& 0.
\end{eqnarray}
Clearly, these can be written in the form of Eq.\ \eqref{edit}.  Here, the
equality restrictions correspond to balance accounts, the 3rd, 4th and 5th can
be considered sanity checks and the last four edits demand positivity of
certain variables.  Figure \ref{emfromtext} shows how these edit rules can be
transformed from a textual representation to a matrix representation with the
{\tt editmatrix} function.
%
\begin{Rcode}
<<keep.source=true>>=
E <- editmatrix(c(
"t  == ct + p" ,
"ct == ch + cp",
"p  <= 0.6*t",
"cp <= 0.3*t",
"ch <= 0.3*t",
"t  >  0",
"ch >  0",
"cp >  0",
"ct >  0"), normalize=TRUE)
E
@ 
\caption{Defining an {\tt editmatrix} from a {\tt character} vector containing verbose edit statements.
The option {\tt normalize=TRUE} ensures that all operators are either ${\tt <}$, ${\tt \leq}$ or ${\tt ==}$.}
\label{emfromtext}
\end{Rcode}
%

As Figure \ref{emfromtext} shows, the editmatrix object is shown on the console
as a matrix, as well as a set of textual edit rules. The {\tt editrules}
package is capable of coercing a set of R expressions to an {\tt editmatrix}
and {\em vice versa}. To coerce text to a matrix, the {\tt editmatrix} function
processes the R language parsetree of the textual R expressions as provided by
the R internal {\tt parse} function. To coerce the matrix representation to
textual representation, an R character string is derived from the matrix which
can be parsed to a language object.

In the example, the edits were automatically named {\tt e1}, {\tt e2}, $\ldots$, {\tt e9}. It is
possible to name and comment edits by reading them from a {\tt data.frame}. 

\begin{Rcode}[t]
<<keep.source=true>>=
# generate a csv text string
E.csv <- 
'name , edit       , description
"b1"  ,    t == ct + p    ,  "total balance"
"b2"  ,    ct == ch + cp  ,  "cost balance"
"s1"  ,    p <= 0.6*t     ,  "profit sanity"
"s2"  ,    cp <= 0.3*t    ,  "personell cost sanity"
"s3"  ,    ch <= 0.3*t    ,  "housing cost sanity"
"p1"  ,    t >0           ,  "turnover positivity"
"p2"  ,    ch > 0         ,  "housing cost positivity"
"p3"  ,    cp > 0         ,  "personel cost positivity"
"p4"  ,    ct > 0         ,  "total cost positivity"'
# read into a data.frame
E.df <- read.csv(textConnection(E.csv))
# transform to an editmatrix
editmatrix(E.df)
@
\caption{Declaring an editmatrix with a {\tt data.frame}. The input {\tt data.frame} is required to have three columns named
{\tt name},(edit name, stored as rowname of augmented matrix) {\tt edit} (textual representation of the edit rule) 
and {\tt description} (a comment stating the intent of the rule). All must be of type {\tt character}.}
\end{Rcode}
%

The ability to read edit sets from a {\tt data.frame} facilitates defining and
maintaining the rules outside of the R environment, by storing them in a
user-filled database for example. Note that manipulating and combining edits,
for example through elimination methods will cause {\tt editrules} to drop or
change the names and drop the comments, as they become meaningless after
certain manipulations.

\subsection{Some simple manipulations}

\begin{table}
\begin{threeparttable}
\caption{Simple manipulation functions for objects of class {\tt editmatrix}}
\label{simplemanipulations}
\begin{tabular}{ll}
\hline
function                      & description\\
\hline
{\tt getA(E)}                 & Get matrix $\bf A$\\
{\tt getb(E)}                 & Get constant vector $\bf b$\\
{\tt getAb(E)}                & Get augmented matrix $[{\bf A},{\bf b}]$\\
{\tt getOps}                  & Get comparison operators\\
{\tt violatedEdits(E, x)}     & Check which edits are violated by ${\bf x}$\\
\hline
\end{tabular}
\end{threeparttable}
\end{table}



Edit checking, retrieving the matrix, operators and coefficients, indexing,...





\section{Manipulation of linear restrictions}

\subsection{Value substitution}

\subsection{Gaussian elimination}

\subsection{Fourier-Motzkin elimination}

\section{Error localization for numerical data}

\subsection{The generalized Fellegi-Holt paradigm}

\subsection{General binary search with the {\tt choicepoint} algorithm}

\subsection{Error localization with {\tt cp.editmatrix}}

\section{Conclusions}

\newpage

\bibliographystyle{chicago}
\bibliography{editrules}


\end{document}
