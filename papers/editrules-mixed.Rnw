%\VignetteIndexEntry{Manipulation of conditional restrictions and error localization with the editrules package}
\documentclass[11pt, fleqn, a4paper]{article}
\usepackage{inconsolata}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb, amsthm}
\usepackage{array}
\usepackage[rounded]{syntax}
\usepackage{color, colortbl}
\usepackage{tex/smalltree}
\usepackage{natbib}
\usepackage[noend]{algpseudocode}
\usepackage{algorithm}
\renewcommand{\algorithmicrequire}{\textbf{Input:}}
\renewcommand{\algorithmicensure}{\textbf{Output:}}
\usepackage{threeparttable}
\usepackage{makeidx}
\usepackage{mySweave}
\makeindex

% shorthand to make '<category>' in syntax diagram
\newcommand{\syncat}{ $\textrm{\sf '}\langle category\rangle\textrm{\sf '}$ }
\newcommand{\notodot}{\odot\kern-0.85em/\:\,}

\DeclareMathOperator*{\argmin}{\arg\!\min}
\DeclareMathOperator*{\Lor}{\lor}
\DeclareMathOperator*{\Land}{\land}
\DeclareMathOperator{\ocup}{\cup}
\DeclareMathOperator{\ocap}{\cap}
\newcommand{\rhomap}{\xrightarrow{\rho}}
\newcommand{\rows}{\textrm{rows}}
\newcommand{\columns}{\textrm{columns}}
\newcommand{\ind}{\textrm{\bf ind}}
\newcommand{\true}{\textrm{\sc true} }
\newcommand{\false}{\textrm{\sc false} }

\newtheorem{theorem}{Theorem}[subsection]
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{remark}[theorem]{Remark}
\newtheorem{example}[theorem]{Example}
\newtheorem{definition}[theorem]{Definition}
\newcommand{\theend}{\hfill$\Box$}

\newcommand{\packageversion}{{\sf 2.5}}

\usepackage{float}
 
\floatstyle{boxed}
\newfloat{Rcode}{t!}{rco}
\floatname{Rcode}{{\rm Figure}}
\makeatletter
\renewcommand{\fnum@Rcode}{%
%% make Rcound count and look like a figure.
%    \addtocounter{figure}{1}
    \setcounter{Rcode}{\value{figure}}
    \addtocounter{Rcode}{1}
    \rm Figure~\arabic{Rcode}% <- avoid space before ':'
}
\makeatother


% stimulate latex to put multiple floats on a page.
\setcounter{topnumber}{2}
\setcounter{bottomnumber}{2}
\setcounter{totalnumber}{3}
\setcounter{dbltopnumber}{2}
\renewcommand{\topfraction}{.9}
\renewcommand{\textfraction}{.1}
\renewcommand{\bottomfraction}{.75}
\renewcommand{\floatpagefraction}{.9}
\renewcommand{\dblfloatpagefraction}{.9}
\renewcommand{\dbltopfraction}{.9}



\hyphenation{
    time-stamp 
    se-pa-ra-te-ly
    ge-ne-ra-li-zed
    e-dit-rules
}

<<echo=false>>=
library(editrules)
@

\title{Manipulation of conditional restrictions and error localization with the
    {\sf editrules} package\\
{\small package version \Sexpr{packageVersion("editrules")}}}
\author{Mark van der Loo and Edwin de Jonge}
\begin{document}
\maketitle
\begin{abstract}
The quality of statistical statements strongly depends on the quality of the
underlying data. Since raw data is often inconsistent or incomplete, data editing
may consume a substantial amount of the resources available for statistical
analyses. Although {\sf R} has many features for analyzing data, the
functionality for data checking and  error localization based on logical
restrictions (edit rules, or edits) is currently limited. The {\sf editrules}
package is designed to offer a user-friendly toolbox for edit definition,
edit manipulation, data checking, and error localization.


Previous versions of the package could handle either numerical or categorical
datasets.  In this paper we describe new functionality pertaining to mixed
numerical and conditional data as well as functionality pertaining to {\em
conditional restrictions}.  Other additions to the package include the ability
to read edits from free-form text files and faster error localization under
certain conditions. This paper marks the release of {\sf editrules} package
version \packageversion.


%This is the third paper describing functionalities of the {\sf R} {\sf
%editrules} package and marks the completion of {\sf editrules} version $\Sexpr{packageVersion('editrules')}$.
%The first paper \citep{jonge:2011} describes methods and implementation for
%handling numerical data, the second paper \citep{loo:2011b} describes methods
%and implementation for handling categorical data. A fourth paper
%\citep{jonge:2012} is dedicated to error localization as a mixed integer
%problem.

\end{abstract}

\newpage
\tableofcontents

\newpage


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% SECTION 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
\label{sIntroduction}
The quality of raw (survey) data is rarely sufficient to allow for
straightforward statistical analyses. Indeed, it has been estimated that
National Statistics Offices may devote as much as 40\% of their resources to
data editing activities \citep{waal:2011}.  For reasons of efficiency and
reproducibility it is therefore highly desirable to automate data editing
processes. 

In the practice of (official) statistics, data records are often required to
obey various restrictions, including sum rules, positivity demands or other
linear inequalities and categorical restrictions that exclude certain value
combinations.  Such rules are called {\em edit rules} or {\em edits} in short,
and a data record is called {\em inconsistent} when it violates one or more
edits. The goal of data editing is to remove inconsistencies while leaving the
reported data intact as much as possible.

Data editing is severely complicated by the fact that edit rules are often
interrelated: a variable can occur in more than one restriction, and a
restriction can contain multiple variables. For example, a variable
in an account balance may occur in several sum rules, creating a dependency
between those rules. It is common in data editing literature to distinguish
between {\em linear restrictions}, {\em categorical restrictions} and 
{\em conditional restrictions}. Linear restrictions are linear (in)equality
restrictions such as range restrictions and sum rules pertaining to 
numerical data. Categorical restrictions are rules that exclude  
invalid value combinations from a categorical dataset. We have discussed
the implementation of linear rules previously in \cite{jonge:2011a} and the
implementation of categorical rules in \cite{loo:2011b}. In this paper
we discuss new functionality of the {\sf R} extension package {\sf editrules}
pertaining to the third category: {\em conditional restrictions}.

Conditional restrictions are a generalization of numerical and categorical rules,
and can therefore pertain to both numerical and categorical variables.
As an example of such a restriction, consider the following demand on
a business survey record:
%
\begin{quote}
If the {\em legal form} (of a business) is self-employed, the {\em number of employees} must be zero.
\end{quote}
This  statement restricts the combined value range of a categorical variable
({\em legal form}) with that of a numerical variable ({\em number of
employees}). The rule is called a {\em conditional} restriction since it is
written in an if-then form where the first part (``If the legal form is
self-employed'') states the condition under which the demand in the second part
(``the number of employees must be zero'') must hold. In the rest of this paper
we will refer to the  first part as the {\em predicate} and to the second part
as the {\em consequent}, as this appears to be the common terminology used in
computer science.


\cite{waal:2003} and \cite{waal:2003a} showed that every edit containing
categorical as well as numerical restrictions can be written in such a form.
That is, all restrictions on categorical data occur in the predicate and
numerical restrictions occur in the consequent expression. The formulation
encompasses the formulation of non-conditional numerical or categorical rules
by choosing appropriate truth values for predicate or consequent. Additionally,
rules connecting two or more numerical restrictions occur in practice as well,
as shown by the following example. 
\begin{quote}
If the {\em number of employees} is positive, the {\em amount of salary} payed must be
positive.
\end{quote}
The latest version of {\sf editrules} presented here (version
{\packageversion}) is now capable of managing conditional edits with a
conditional as well as with a numerical predicate.

The rest of this paper is structured as follows. In Section \ref{s:mixeddata}
we describe which restrictions can be handled by the package, and introduce the
central {\sf R} object for storing and manipulating conditional restrictions:
the {\sf editset} object.  In Section \ref{smanipulation} we provide details on
the most important edit manipulations that the package provides and Section
\ref{s:errorlocalization} is devoted to error localization. Examples in {\sf R}
code are given throughout to help new users getting started with this
functionality.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% SECTION 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Mixed data and conditional edits}
\label{s:mixeddata}
The term {\em mixed data} is used in this paper to indicate data containing both
numerical and categorical data. We do not distinguish between integer and real
numbers here: currently, both are handled as real numbers by {\sf editrules}.
We also do not distinguish between logical and categorical data: under the
hood, {\sf editrules} handles these data types as {\sf character}, although a
user need not consider this when specifying types (see also \cite{loo:2011b}).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\subsection{Reading and writing edits}
\begin{figure}
\begin{Verbatim}[frame=single]
# define category domains
    BOOL <- c(TRUE,FALSE)
    OPTIONS <- letters[1:4]

# (conditional) numerical edits
    x + y == z
    2*u  + 0.5*v == 3*w
    w >= 0
    if ( x > 0 ) y > 0
    if ( x > y ) z < 10
    x >= 0
    y >= 0
    z >= 0

# categorical and mixed data edits
    A %in% OPTIONS
    B %in% OPTIONS
    C %in% BOOL
    D %in% letters[5:8]
    if ( A %in% c('a','b') ) y > 0
    if ( A == 'c' ) B %in% letters[1:3]
    if ( !C == TRUE) D %in% c('e','f')
\end{Verbatim}
\vspace{-0.8cm}
\caption{Example of a free-form text file defining numerical, categorical and conditional 
edits. The edits can be read into {\sf R} with the {\sf editfile} function.}
\label{fig:editfile}
\end{figure}
%

In previos versions of {\sf editrules}, edits could be read from {\sf
character} vectors where each element contains a rule in textual form. For
version {\packageversion}, the parsing capabilities have been extended to allow
for rules in free-form textfiles or in {\sf expression} vector form.  From a
user perspective, the free-form textfiles are the most convenient when working
reproducibly with (large) rule sets. The capabilities for parsing expression
vectors is usefull when defining rules {\em ad hoc} on the command line.
An overview of edit reading  and coercing functions is given in Table
\ref{tab:coercion}.


As an example, Figure \ref{fig:editfile} shows the contents of an example text
file that is included with the package. Note that the domains of categorical
variables (the {\em data model}) may be defined separate from the edits. This
is convenient for domains which are reused over several variables or for large
domains that need to be read from file. Numerical and categorical edits can be
submitted as they would for objects of class {\sf editmatrix} or {\sf
editarray} respectively, while conditional edits must follow the following
syntax diagram.
%
\begin{syntdiag}
if ( 
\begin{rep}
    \begin{stack}
        <linear inequality>\\
        <set expression>
    \end{stack}\\
\begin{stack}   "&"\\"&&"\end{stack}
\end{rep}
)
\begin{rep}
    \begin{stack}
        <linear inequality>\\
        <set expression>
    \end{stack}\\
\begin{stack}   "|"\\"||"\end{stack}
\end{rep}
\end{syntdiag}
Here, \verb+&+ and \verb+&&+ and \verb+|+ and \verb+||+ are synonyms. The
symbol $\langle\textrm{\em set expression}\rangle$ is an expression indicating
set membership for categorical values, for example {\tt A \%in\% c("a","b")}. See
\cite{loo:2011b} for a syntax diagram of possible set expressions. Comments,
(preceded by a $\#$) are allowed as well, and will be ignored by the parser. 

Since the file of Figure \ref{fig:editfile} is included with the package it can be
read as follows.
<<>>=
myfile <- system.file("script/edits/myedits.txt",
    package="editrules")
(E <- editfile(myfile))
@
\label{code:editfile}
In the first line, the example file is located using {\sf R}'s built-in {\sf
system.file} command. The second line is where the actal work is done: the
function {\sf editfile} takes a filename (including the path) as argument,
reads and parses the edits in the file and returns an object of class {\sf
editset}, here stored in variable {\sf E}. The extra brackets around the second
statement are only added to force {\sf R} to print the result to screen.

When an {\sf editset} is printed, the data model for categorical variables, as
well as the textual representation of the edits are shown. For convenience,
edits are named according to their type.  Pure numerical edits are numbered
with prefix {\sf num}, pure categorical with prefix {\sf cat} and conditional
edits are prefixed with {\sf mix}. 

The function {\sf editfile} has an optional {\sf type} argument, allowing for
extracting only the numerical ({\sf type="num"}), categorical ({\sf
type="cat"}) or conditional edits ({\sf type="mix"}) from the text file.  When
{\sf type="num"} or {\sf type="cat"}, an {\sf editmatrix} or {\sf editarray} is
returned respectively. Using these more specialized objects yields some
performance enhancement for common operations such as value substitution and
variable elimination. Under the hood, {\sf editfile} parses the file, looks for
assignments (by {\sf <-} or {\sf =}) and evaluates them in a separate {\sf R}
{\sf environment}. Next, the edits are generated within that environment.

Edits can be selected with the bracket operator, using integer or logical indices,
for example:
<<>>=
E[c(7,10),]
@
By default, the full data model is retained when selecting a subset of edits.
The {\sf reduce} function can be used to remove variables not occurring in any
edit from an {\sf editset} object.

To export edits, the most convenient way is to use either {\sf as.character} to
convert an {\sf editset} to text or {\sf as.data.frame} to convert it to a
2-column {\sf data.frame}. One can then use {\sf R}'s standard I/O
functionality to store edits as a structured text file, or use one of the
database interfaces to send edits to a database. 


\begin{table}
\begin{threeparttable}
\caption{Functions for reading and coercing (conditional) edits.}
\label{tab:coercion}
\begin{tabular}{lp{0.7\textwidth}}
\hline
Function        & Description\\
\hline
{\sf editfile}     & read from free-form textfile\\
{\sf editset}      & read from {\sf character} or {\sf expression} vector\\
{\sf as.character} & convert editset to {\sf character} vector\\
{\sf as.data.frame}& convert editset to two-column {\sf data.frame}\\ 
\hline
\end{tabular}
\end{threeparttable}
\end{table}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Edit checking, obvious redundancy and obvious infeasibility}
\label{ss:checking}
Data can be checked against edits in an {\sf editset} with the {\sf violatedEdits}
function. This function accepts an {\sf editset} and a {\sf data.frame} and
returns a logical array (of class {\sf violatedEdits}) where each row and
column indicates which record violates what edit. A {\sf summary} and {\sf
plot} method is available for {\sf violatedEdits} objects so users can get a
quick overview of edit violation frequencies. Internally, the {\sf
violatedEdits} method for editsets works by coercing the edits to logical {\sf
character} expression and using {\sf R}'s evaluation functionality to parse and
evaluate these expressions in the context of the {\sf data.frame}. 

An edit in an {\sf editset} is obviously redundant when it is the duplicate of
another edit or when it has an easily recognizable form such as $0 < 1$. Such
redundancies may arise after edit manipulations (value substitution, variable
elimination).  The {\sf isObviouslyRedundant} method for {\sf editset} returns
a logical vector indicating which edit in an editset is redundant (\true) or
not ({\sc false}). If the {\sf editset} was separated in independent
conditional {\sf editsets} by {\sf disjunct}, a list of boolean vectors is returned.
For a detailed description of detecting obvious redundancies in numerical or
categorical edits, we refer to \cite{jonge:2011} and \cite{loo:2011b}.

An edit in an {\sf editset} is obviously infeasible when it contains an easily
recognizable self-contradicting edit, such as $0>1$. The function {\sf
isObviouslyInfeasible} returns \true for editsets containing one or more
obvious contradictions in numerical or categorical edits. Note that
when {\sf isObviouslyInfeasible} returns {\sc false}, this does not
guarantee that the set of edits is consistent. Contradictions may still
be implied by the edits. Finding out whether a set of edits is satisfiable
can be far more computationally intensive. We will return to this problem
in Section \ref{ss:elimination}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Visualizing and disentangling edits}
\label{ss:disentangling}
As stated in the introduction, the fact that edits are entangled by shared variables
severely complicates data editing: changing the value of a variable to solve an edit
violation may cause the violation of another edit.

To make data editing more tractable, it is desired to break entangled sets of
edits into smaller independent subsets as much as possible. Table
\ref{tab:separators} gives an overview of edit separation functions available
in the {\sf editrules} package. The most important ones will be discused
below.

As an example, consider the dependency graph of the edits introduced in Figure
\ref{fig:editfile}. The graph can be generated by issuing the command
<<eval=false>>=
plot(E)
@
and is depicted in Figure \ref{fig:graph}. A dependency graph represents the
rules (squares) and variables (circles) that occur in an editset. A line is
drawn between a square and a circle if the variable corresponding to the circle
occurs in the rule represented by the square.  Internally, the graph is
generated by calling {\sf contains} on {\sf E}, which returns a logical matrix
that indicates which edit contains which variables.  Next, this matrix is
converted to an {\sf igraph} object and plotted with the {\sf igraph0} package
\citep{csardi:2006}. The plot methods for {\sf editset}, {\sf editmatrix} and
{\sf editarray} have several options for coloring violated edits or erroneous
variables. Refer to the built-in documentation of the package for an extensive
overview and examples.

% according to Yihui, God kills a little kitten here :'(
\setkeys{Gin}{width=0.7\textwidth}
\begin{figure}
\centering
<<fig=true, echo=false>>=
set.seed(3)
par(oma=c(0,0,0,0),mar=c(0,0,0,0))
plot(E)
@
\caption{Dependency graph of edits defined in Figure \ref{fig:editfile}. The
squares represent edit rules, and the circles represent variables. An edge
indicates that a variable occurs in an edit.  }
\label{fig:graph}
\end{figure}
The dependency graph clearly shows that our example set can be split into three
unrelated blocks. These blocks (corresponding to columns of data) can therefore
be treated separately when performing edit manipulations. Since important
manipulations such as variable elimination have exponential complexity in the
number of edits, recognizing such blocks can considerably enhance performance.

The higher-level error localization function that will be discussed in section
\ref{ss:errorlocalization}, in fact does detect and exploit this block
structure, so users need not concern themselves with it directly. To facilitate
edit rule investigation and maintenance, the lower-level {\sf blocks} function
is also exported to user space. This function returns a {\sf list} of the
independent {\sf editsets}, as illustrated by the following example.
<<>>=
sapply(blocks(E),nedits)
@
Here, {\sf nedits} counts the number of edits in an editset and {\sf sapply}
makes sure that {\sf nedits} is applied to each member of the {\sf list}
returned by {\sf blocks}.  Clearly, the three independent blocks with 8, 3 and
1 edits (Figure \ref{fig:graph}) have been found.
<<echo=false>>=
v <- disjunct(E)
@
\begin{figure}
\setkeys{Gin}{width=0.9\textwidth}
<<fig=true,echo=false>>=
v <- disjunct(E)
par(oma=c(0,0,0,0),mar=c(0,0,1.5,0),mfrow=c(2,2),pty='m')
for ( i in 1:length(v) ){
    set.seed(1)
    plot(
        v[[i]],
        main=paste(as.character(editrules:::condition(v[[i]])),collapse=', ')
    )
}
@
\caption{Dependency graphs of the conditional {\sf editsets}
generated from the edits of Figure \ref{fig:editfile}. There are no paths from
numerical variables ($x$, $y$, $z$, $u$, $v$, $w$) to categorical 
variables ($A$, $B$, $C$, $D$) anymore. The titles of the subplots indicate
the predicates for each {\sf editset}. Edits with the same name contain the
same variables but not necessarily the same condition on those variables across
subplots.
}
\label{fig:disjunct}
\end{figure}


The largest cluster of edits in Figure \ref{fig:graph} connects numerical
variables with categorical variables. Operations such as variable elimination
are difficult to implement for such edit sets. However, it is possible to split
up such a set further by working out what happens when we assume statements in
the predicate or consequent to be {\sc true} or {\sc false}. 

Consider again the edits on page \pageref{code:editfile}.  As an example,
assume that $x>0$ in \verb"mix9". We then know that $y>0$ must hold. This means
that \verb"num5" becomes redundant and \verb"mix11" reduces to $y>0$ and
becomes therefore redundant.  On the other hand, when we assume $x\leq0$, then
\verb"mix9" can be dropped, since the value of $y$ has become unimportant for
that edit.  Combined with \verb"num4", assuming that $x\leq0$ this means that
$x=0$.  


The assumption $x>0$ and $x\leq$ exclude each other. Working out their
consequences therefore yield two different edit sets which cannot be obeyed
fully by a record at the same time. If we continue making assumptions for the
numerical statements in conditional edits recursively and work out their
consequences, we get a list of {\em conditional} {\sf editsets} where for each
{\sf editset}, the dependencies between categorical and numerical edits have
been severed.

The function {\sf disjunct} implements this procedure. It speeds up computation
by detecting whenever contradictory assumptions have been made. The function
returns a {\sf list} of conditional {\sf editset}s or optionally, an {\sf R}
{\sf environment} containing those {\sf editset}s. The conditions pertaining to
each {\sf editset} can be retrieved using the {\sf condition} function.  Figure
\ref{fig:disjunct} shows the dependency graphs of the four conditional {\sf
editset}s resulting after calling 
<<eval=false>>=
disjunct(E) 
@
The conditional {\sf editset}s form an equivalent representation of the
original set and have the advantage that operations such as variable
elimination (and therefore error localization) can be performed separately for
each set. Note that in Figure \ref{fig:disjunct}, there are no paths running
from numerical to categorical variables anymore.  The downside is that for
large, strongly connected edit sets, separation into disjunct sets can be a
computationally daunting task, growing exponentially in the number of edits. We
will shortly return to this problem in section \ref{s:errorlocalization}. More
background on manipulation of categorical edits will be descibed in a
forthcoming paper \citep{loo:2012b}. Here, we just note that there are four
numerical edits in the example set of Figure \ref{fig:editfile}, yielding
$2^4=16$ possible assumptions for their respective truth values. In principle
this means that sixteen {\sf editset} objects should be derived. However,
because some assumptions conflict, only four subsets are generated. For
example, the reader may veryfy that assuming that $x\leq0$ and $y>0$ and $y<x$
are contradictory demands. 

Finally, we note that the utility function {\sf separate} performs both the
block decomposition based on variable occurrence and calls, when appropriate,
the {\sf disjunct} function on conditional edits. The results are simplified as
much as possible and returned in a {\sf list}.







\begin{table}[t]
\caption{Edit separation functions. Each function accepts an {\sf editset} as input.}
\label{tab:separators}
\begin{tabular}{lp{0.8\textwidth}}
\hline
Function & Description\\
\hline
{\sf contains}  & Detects which edit contains which variable\\
{\sf plot}      & Plot the dependency graph\\
{\sf blocks}    & Splits an {\sf editset} in independent edits not sharing any variables\\
{\sf disjunct}  & Splits an {\sf editset} in disjunct sets, not containing mixed edits\\
{\sf condition} & Returns the {\sf editmatrix} holding the conditions for an {\sf editset} generated by {\sf disjunct}\\
{\sf separate}  & Uses {\sf blocks}, simplifies the results, and calls {\sf disjunct} on the remaining {\sf editset}s\\
\hline
\end{tabular}
\end{table}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% SECTION 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Manipulation of conditional edits}
\label{smanipulation}
The two basic operations on any set of restrictions, either numerical,
categorical, or conditional, are value substitution and variable elimination.
Methods for the pure numerical and pure categorical situations are fairly
straightforward and have been implemented in the {\sf editrules} package
before. Operations on conditional edits require a bit more care, which will be
detailed in the next two subsections.

\subsection{Value substitution}
\label{sssubstitution}
Assigning a value to a variable occurring in an {\sf editset} can be done with
the {\sf substValue} function. The consequences of substituting a value in
conditional edits require a bit more care than for simple linear or categorical
edits. Recall the truth table for the logical implication of $q$ by $p$, denoted $p\rightarrow q$:
\begin{displaymath}
\begin{array}{ccc}
p      & q       & p\rightarrow q\\
\hline
\true  & \true   & \true \\
\true  & \false  & \false \\
\false & \true   & \true\\
\false & \false  & \true\\
\end{array}
\end{displaymath}
When either predicate or consequent of a conditional edit resolves to a truth
value after substituting a variable, the remaining edits must be processed
according to this table.  As a demonstration, consider the following simple
{\sf editset}, consisting of a single conditional edit.
<<>>=
X <- editset("if ( x > 0 )  y > 0")
@
Substituting a value for $x$ so that the predicate holds, obviously yields 
a numerical edit.
<<>>=
substValue(X,'x',1)
@
Substituting a value so that the predicate does not hold yields an empty {\sf editset}
since the condition in the consequent only has to be obeyed when the predicate holds.
<<>>=
substValue(X,'x',-1)
@
The same happens when we enter a value for $y$ so that the consequent holds:
<<>>=
substValue(X,'y',1)
@
since in that case, the value of the predicate is unimportant. On the other hand,
when the restriction in the consequent resolves to {\sc false}, the predicate cannot
be \true and must be inverted.
<<>>=
substValue(X,'y',-1)
@
Observe that the {\sf substValue} function recognizes that the remaining edits
are purely numerical.


%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Variable elimination and satisfiability}
\label{ss:elimination}
Variable elimination is the mechanism by which edits, logically implied by a
set of (user-defined) edits, are derived.  Variable elimination amounts to
deriving all implicit edit rules from a set of edits which do not contain the
eliminated variable anymore.  For an {\sf editset} object, it is executed by
first separating the edits in disconnected sets as described in Section
\ref{ss:disentangling}.  Next, variables are eliminated from the separate
numerical or categorical parts of every separate conditional {\sf editset}.

As an example, we will eliminate variable $y$ from the following set of
conditional edits.
\begin{equation}
G = \left\{\begin{array}{l}
\textrm{\sf if } x \geq 0 \textrm{ \sf then } y\geq 0\\
\textrm{\sf if } x \geq 0 \textrm{ \sf then } x \leq y\\
\textrm{\sf if } x < 0 \textrm{ \sf then } y < 0\\
\textrm{\sf if } x < 0 \textrm{ \sf then } x - y < -2. \\
\end{array}\right.
\label{eq:edits}
\end{equation}
Observe that these edits are all connected, since all of them contain both $x$
and $y$.  In Figure \ref{fig:projections}, the valid areas in the $xy$-plane
defined by these edits are shown in grey. Because of their conditional
structure, the edits define two disjunct subregions. Informally, if $x<0$, a
record $(x,y)$ must be in the left grey region and if $x\geq0$, it must be in
the right grey region.

%
\setkeys{Gin}{width=0.5\textwidth}
\begin{figure}
\centering
<<fig=true,echo=false>>=
    par(mar=rep(0,4),oma=rep(0,4))
    lwd=2
    pcol <- "#E3E3E3" 
    x <- c(0,4)
    plot(x,x,"l",axes=FALSE,xlab="",ylab="",xlim=c(-4,4),ylim=c(-2,3),lwd=lwd)
    polygon(c(0,3.9,3.9),c(0,3.9,0),border=NA,col=pcol)
    polygon(c(-2,-3.9,-3.9),c(0,0,-1.9),border=NA,col=pcol)
    lines(x,x,lwd=lwd)
    abline(v=0,lwd=lwd)
    abline(h=0,lwd=lwd)
    x2 <- c(-2,-4)
    lines(x2,x2+2,lwd=lwd)
    lines(c(0,5),c(0,0),lwd=5)
    points(0,0,pch=16,cex=2)
    lines(c(-2,-5),c(0,0),lwd=5)
    text(4,-0.2,expression(x),cex=2)
    text(-0.2,3,expression(y),cex=2)
@
\caption{Graphical representation (in gray) of the valid areas defined by the
edits of Eq.\ \eqref{eq:edits}. Depicted are sections of the bordering lines
$y=x$ and $y=x+2$.  The bold lines indicate the projections of the gray areas
along the $y$-axis.
}
\label{fig:projections}
\end{figure}

Recall that geometrically, eliminating a variable from a set of linear (in)equalities
amounts to a projection along the corresponding axis. Here, eliminating $y$ amounts to 
projecting the grey areas along the $y$-axis, yielding two separate line segments, shown
in bold in Figure \ref{fig:projections}.


\setcounter{Rcode}{\value{figure}}
\begin{Rcode}[t!]
<<>>=
G <- editset(expression(
    if ( x >= 0 ) y >= 0,
    if ( x >= 0 ) x <= y,
    if ( x < 0 ) y < 0,
    if ( x < 0 ) x - y < -2
))
eliminate(G,"y")
@
\caption{Eliminating a variable from an object of class {\sf editset} results in a number
of {\sf editsets} which are stored in an {\sf editlist} object.}
\label{fig:elimination}
\end{Rcode}

Figure \ref{fig:elimination} shows how to perform the elimination with the {\sf
editrules} package.  In the first line, the edits are defined, using an {\sf
expression} vector as input. In the second line, variable $y$ is eliminated by
calling {\sf eliminate}. The result is an object of class {\sf editlist},
containing two {\sf editsets}. The first {\sf editset} holds when $x\geq0$ and
holds no further restrictions: the restriction $x\geq0$ corresponds exactly
with the projection of the right grey area of Figure \ref{fig:projections} on
the $x$-axis. The second editset holds when $x<0$, and imposes that in that
case $x < -2$.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% SECTION 3
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Error localization in mixed data}
\label{s:errorlocalization}

Given that a record violates a number of edit rules, the problem remains to
point out which fields cause the error. When there is no clear evidence
pointing out which variables cause the violations, one can resort to adapting
as few variables as possible. Adapting as few variables as possible, without
violating any new, implied rules is referred to as the principle of
\cite{fellegi:1976}, who described the first systematic approach to error
localization.


\subsection{Error localization with {\sf localizeErrors} and {\sf errorLocalizer}} 
\label{ss:errorlocalization}
In {\sf editrules}, errors can be localized according to Felligi and Holt's
principle using the {\sf localizeErrors} function. This function has been
introduced earlier for purely numerical data \citep{jonge:2011} and for
purely categorical data \citep{loo:2011c}, and has now been extended to 
handle conditional edits.

The interface of {\sf localizeErrors} is exactly the same as described
in the references above. The minimal input is an {\sf editset} and a
{\sf data.frame} and the output is an object of class {\sf errorLocalizer},
which holds error locations as well as some logging info. Below we give
a simple demonstration.

<<>>=
E <- editset(expression(
    if ( x > 0 ) y > 0,
    x + y == 10
))
dat <- data.frame(x = 1, y = -5)
el <- localizeErrors(E,dat)
el$adapt
el$status
@
In the first line we define an edit set demanding that when $x>0$, then $y>0$
and that $x$ and $y$ must add up to 10. The second line defines a record where
$(x=1,y=-5)$. Obviously, this record violates both restrictions. The errors may
be resolved by either adapting $y$ or $x$ and $y$. The former solution is the
minimal case and this is what {\sf localizeErrors} returns in line 3: the array {\sf
el\$adapt} indicates with a boolean value which variable in which record must be
changed. The {\sf data.frame} {\sf el\$status} gives information on the total
solution weight, the number of equivalent solutions (degeneracy) and the
amount of time it took to compute the solution.


\subsection{Some details on implementation}
The error localization problem consists of finding the least (weighted) number
of fields in a record that can be adapted or imputed, such that no edits are
violated anymore. \cite{waal:2003} developed a branch-and-bound algorithm which
computes solutions to the localization problem by systematically building and
testing partial solutions. The computational time necessary for the algorithm
to complete is exponential in the number of variables. Therefore, partial
solutions which cannot lead to a solution are abandoned (pruning) as much as
possible.  To decrease the number of variables entering the branch-and-bound
algorithm, edits sets are separated in independent blocks (using the {\sf
blocks} function).  Since version {\packageversion} of {\sf editrules}, error
localization is accelerated further by adding variables which violate
univariate constraints to the solution set prior to entering the
branch-and-bound algorithm.

Because for conditional edits, an {\sf editset} must be separated by the {\sf
disjunct} function described earlier, error localization using the
branch-and-bound approach can become computationally expensive when many
entangled conditional edits are involved.  For this reason a second algorithm
based on a mixed-integer formulation of the problem has been implemented as
well. This algorithm avoids explicit variable elimination and value
substitution and will be reported upon in a separate paper \citep{jonge:2012}.


\section{Conclusions}
\label{sconclusions}
We described new functionality of the {\sf editrules} package, pertaining to
conditional restrictions and mixed data edits. All existing edit manipulation
functions have been overloaded to handle the new {\sf editset} object and
several new edit manipulation features have been added.  Most notably the
possibility to read edits from a free-form textfile and the option to split
sets of edits in disjunct sets that do not contain any mixed data edits
anymore. Also, the branch-and-bound error localization methods have been
accelerated by taking care of range edit violations prior to multivariate error
localization.

Future work on the package may include the extension to {\em soft edits}, where
not only the violation of an edit is weighed in the process of error
localization but also the {\em amount} of violation can be taken into account
during error localization.


\clearpage
\bibliographystyle{chicago}
\bibliography{editrules}

\clearpage
\addcontentsline{toc}{section}{Index}
\printindex



\end{document}


